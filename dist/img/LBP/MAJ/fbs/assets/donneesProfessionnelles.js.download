//<![CDATA[ 
addOnloadFunction(setSelectValue);
var FormulaireInfosProfessionnelles = {
		
		 /**
		 * Messages d'erreurs 
		 */
	    ErrorMessage : {
			messageInfosProfessionnellesObligatoires:"Certains \351l\351ments n'ont pas \351t\351 renseign\351s. Veuillez compl\351ter votre saisie.",
			messageInfosProfessionnellesInchangees:"Vous n'avez proc\351d\351 \340 aucune saisie. Veuillez saisir vos informations dans les champs d\351di\351s"
	    },
	    
	    /**
	     * Classe de validation pour le formulaire CreationAlerte
	     * @class FormBean
	     * @inherits BELFormBean
	     */
	    FormBean : function() {
	        
	        /**
			 * Creation de la methode extends pour les FormBean
			 */
			this.extend = function (oSuper) {
			    if(!this.parent) {
			        this.parent = oSuper;
			        for (var sProperty in oSuper) {
			            this[sProperty] = oSuper[sProperty];
				        }
				    }
			}
	        
	        // on herite de BELFormBean
	        this.extend(new BELFormBean());
	        
			
	        /**
	         * Implementation de la validation Javascript
	         * via un copier/coller de la methode validate()
	         * du FormBean ecrite en Java (plus quelques menues adaptations)
	         * @inherits BELFormBean#validate()
	         */
	        this.validate = function() {
	        
		        /* Recuperation des valeurs du formulaire */
		       	var libelleProfession = document.getElementById("profession").value.toUpperCase();
		       	var form = document.forms["informationsProfessionnellesForm"];
		       	var categoriePro = jsTrim(form.elements["categorie"].options[form.elements["categorie"].selectedIndex].text.toUpperCase());
		       	var detailCategoriePro = jsTrim(form.elements["detailCategorie"].options[form.elements["detailCategorie"].selectedIndex].text.toUpperCase());
				
				// R\351cup\351ration des valeurs initiales
				var libelleProfessionInit = jsTrim(document.getElementById("professionInit").value.toUpperCase());
				 var detailCategorieProInit = jsTrim(document.getElementById("detailCategorieProInit").value.toUpperCase());
				 var categorieProInit = jsTrim(document.getElementById("categorieProInit").value.toUpperCase());
				 
				// Cas o\371 aucun changement n'a \351t\351 effectu\351
				if(libelleProfession == libelleProfessionInit && categoriePro == categorieProInit && detailCategoriePro == detailCategorieProInit){
					// Controle invalide, creation d'un FormError pour le champ controle
		            err = this.createFormError("donneesSaisies.detailCategoriePro","FormulaireInfosProfessionnelles.ErrorMessage.messageInfosProfessionnellesInchangees");
		            // Ajout de l'erreur dans l'exception conteneur
		            this.registerFormError(this.fie, err);
		            // on renvois de suite l'erreur
		            return this.fie;
				}
					
				/* Verification des champs 
				 * 
				 * Si un des trois champs ne sont pas renseignes, on remonte un message d'erreur
				 * 
				 * */
				if (StringUtils.isEmptyOrBlank(libelleProfession)) {
					// Controle invalide, creation d'un FormError pour le champ controle
		            err = this.createFormError("donneesSaisies.libelleProfession","FormulaireInfosProfessionnelles.ErrorMessage.messageInfosProfessionnellesObligatoires");
		            // Ajout de l'erreur dans l'exception conteneur
		            this.registerFormError(this.fie, err);
		            // on renvois de suite l'erreur
		            return this.fie;
				}
				if ("A SÉLECTIONNER" == categoriePro) {
					// Contr\364le invalide, cr\351ation d'un FormError pour le champ controle
		            err = this.createFormError("donneesSaisies.categoriePro","FormulaireInfosProfessionnelles.ErrorMessage.messageInfosProfessionnellesObligatoires");
		            // Ajout de l'erreur dans l'exception conteneur
		            this.registerFormError(this.fie, err);
		            // on renvois de suite l'erreur
		            return this.fie;
				}
				if ("A SÉLECTIONNER" == detailCategoriePro) {
					// Controle invalide, creation d'un FormError pour le champ controle
		            err = this.createFormError("donneesSaisies.detailCategoriePro","FormulaireInfosProfessionnelles.ErrorMessage.messageInfosProfessionnellesObligatoires");
		            // Ajout de l'erreur dans l'exception conteneur
		            this.registerFormError(this.fie, err);
		            // on renvois de suite l'erreur
		            return this.fie;
				}

		        return this.fie;
			}
		}
			
}
/**
 * Validation : fonction appelee par la validation Javascript standard generee par le Framework.
 *
 * @param aForm le formulaire \340 valider
 * @param errors les erreurs retourn\351es par la m\351thode
 */
function onsubmit_validate_informationsProfessionnellesForm (aForm, errors) {
   // instanciation du FormBean.
   var validateur = new FormulaireInfosProfessionnelles.FormBean();
   // initialisation du FormBean
   validateur.init(aForm, errors);
   // appel de la validation
   return validateur.validate();
}

/* function stockerValeurSaisie. Permet de valoriser cote serveur la categorie et le detail selectionnees*/
function stockerValeurSaisie(){
	var form = document.forms["informationsProfessionnellesForm"];
	var categorieEnCours =  form.elements["categorie"].options[form.elements["categorie"].selectedIndex].text;
	document.getElementById("categorieSP").value = categorieEnCours;
	var detailCategorieEnCours = form.elements["detailCategorie"].options[form.elements["detailCategorie"].selectedIndex].text;
	document.getElementById("detailCategorieSP").value = detailCategorieEnCours;
	 if (categorieEnCours == "OUVRIERS" || categorieEnCours == "RETRAITES" || categorieEnCours == "ELEVES, ETUDIANTS"){
		 $('#detailCategorie').attr("disabled", "true");
	 }else {
		 $('#detailCategorie').removeAttr("disabled");
	 }
}


//fonction permettant de selectionner la bonne option dans un select a partir d'une valeur.
function setSelectValue(){
	 var categorieModifiee = false;
	 /* si c'est la premiere fois que l'on vient sur cette page de toute la session, on vient rechercher les categories recuperes du context */
	 /* Sinon on recupere les categories choisies par le client dans ce CU */
	 if(infoRenseigneePremiereFois == true){
		 var detailCategorieProInit = document.getElementById("detailCategorieProInit").value;
		 var categorieProInit = document.getElementById("categorieProInit").value;
	 }
	 else {
		 var detailCategorieProInit = document.getElementById("detailCategorieSP").value;
		 var categorieProInit = document.getElementById("categorieSP").value;
	 }
	
	 
	 var form = document.forms["informationsProfessionnellesForm"];
	 /* On recupere les libelles selectionnes */
	 var listeCategorie = form.elements["categorie"];
	 var listeDetailCategorie = form.elements["detailCategorie"];
	 var categorieEnCours = form.elements["categorie"].options[form.elements["categorie"].selectedIndex].text;
	 var detailCategorieEnCours = form.elements["detailCategorie"].options[form.elements["detailCategorie"].selectedIndex].text;
	 
	// Si la cat\351gorie en cours correspond \340 celle choisie par le client, on ne fait rien. sinon on force la s\351lection de la cat\351gorie \340 celle choisie par le client 
	 if(categorieProInit != categorieEnCours){
		 categorieModifiee = parcourirCategories(listeCategorie, categorieModifiee, categorieProInit);
		 // Vu que l'on modifie la cat\351gorie, il faut modifier aussi le d\351tail des cat\351gories
		 if(categorieModifiee == true){
			 parcourirDetailCategories(listeCategorie, listeDetailCategorie, detailCategorieProInit);
		}
	 }
	 // Cas ou l'on se trouve bien dans la bonne categorie. On verifie que le detail de la categorie correspond bien a celle choisie
	 else {
		 if(detailCategorieProInit != detailCategorieEnCours){
			 categorieModifiee = parcourirCategories(listeCategorie, categorieModifiee, categorieProInit);
			 parcourirDetailCategories(listeCategorie, listeDetailCategorie, detailCategorieProInit);
		 }
	 }
	 /* On appelle cette fonction permettant de recuperer les donnees dans une variable cote serveur a l'init */
	 stockerValeurSaisie();
	/*On a pas trouve la valeur on retourne faux*/
	return false;
}

function parcourirCategories(listeCategorie, categorieModifiee, categorieProInit){
	 for (var i = 0; i < listeCategorie.length; i++)
	 {
			/*Si l'element a la bonne valeur on le selectionne*/
			if(listeCategorie[i].text == categorieProInit)
			{
				listeCategorie.selectedIndex = i;
				categorieModifiee = true;
				break;
			}
	 }
	 return categorieModifiee;
}


function parcourirDetailCategories(listeCategorie, listeDetailCategorie, detailCategorieProInit){
	//On recupere l'index dans le tableau tabcategorieSPdetailCategorie genere dynamiquement par le framework
	 var index = listeCategorie.selectedIndex;
	 listeDetailCategorie.options.length=tabcategoriedetailCategorie[index].length;
	 for (var j = 0; j < tabcategoriedetailCategorie[index].length; j++) 
	 {
		 listeDetailCategorie.options[j] = eval(tabcategoriedetailCategorie[index][j]);
	 }
	 for (var k = 0; k < listeDetailCategorie.length; k++)
	 {
		 /*Si l'element a la bonne valeur on le selectionne*/
			if(listeDetailCategorie[k].text == detailCategorieProInit)
			{
				listeDetailCategorie.selectedIndex = k;
				 stockerValeurSaisie();
				return true;
			}
			/* Sinon on le positionne a "A selectionner" 1er element */
			else {
				listeDetailCategorie.selectedIndex = 0;
			}
	 }
}

//]]>